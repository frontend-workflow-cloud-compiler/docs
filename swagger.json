{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "Unglue API",
    "url" : "https://virtserver.swaggerhub.com/TheMaaarc/Unglue/1.1.1"
  } ],
  "info" : {
    "description" : "The Unglue API.<br />\nMore informations on <a href=\"https://unglue.io\">unglue.io</a>.\n",
    "version" : "1.1.1",
    "title" : "Unglue API",
    "contact" : {
      "email" : "marc@zephir.ch"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "API Calls"
  } ],
  "paths" : {
    "/css" : {
      "get" : {
        "summary" : "Compiles SCSS to CSS and applies different transformations based on options.",
        "tags" : [ "API Calls" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "files",
          "description" : "Alle input files that will be needed for the compilation.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "file" : {
                  "type" : "string"
                },
                "relative" : {
                  "type" : "string"
                },
                "code" : {
                  "type" : "string"
                }
              }
            }
          }
        }, {
          "in" : "query",
          "name" : "distFile",
          "description" : "The name of the dist file.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "mainFiles",
          "description" : "The \"entry\" .scss files (generally the ones without _ infront of their name.)",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "in" : "query",
          "name" : "options",
          "description" : "The options that should be used for compilation.",
          "required" : false,
          "schema" : {
            "type" : "object",
            "properties" : {
              "compress" : {
                "type" : "boolean"
              },
              "maps" : {
                "type" : "boolean"
              },
              "css" : {
                "type" : "object",
                "nullable" : true,
                "properties" : {
                  "autoprefixer" : {
                    "type" : "object",
                    "nullable" : true
                  },
                  "cssnano" : {
                    "type" : "object",
                    "nullable" : true
                  }
                }
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Compiled code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompileResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/js" : {
      "get" : {
        "summary" : "Compiles, Uglifies and converts ES6 to ES5 based on options.",
        "tags" : [ "API Calls" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "files",
          "description" : "Alle input files that will be needed for the compilation.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "file" : {
                  "type" : "string"
                },
                "relative" : {
                  "type" : "string"
                },
                "code" : {
                  "type" : "string"
                }
              }
            }
          }
        }, {
          "in" : "query",
          "name" : "distFile",
          "description" : "Name of the distFile, will be used for sourcemaps generation.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "options",
          "description" : "The options that should be used for compilation.",
          "required" : false,
          "schema" : {
            "type" : "object",
            "properties" : {
              "compress" : {
                "type" : "boolean"
              },
              "maps" : {
                "type" : "boolean"
              },
              "js" : {
                "type" : "object",
                "nullable" : true,
                "properties" : {
                  "babel" : {
                    "type" : "object",
                    "nullable" : true
                  },
                  "uglifyjs" : {
                    "type" : "object",
                    "nullable" : true
                  }
                }
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Compiled code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompileResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/svg-sprite" : {
      "get" : {
        "summary" : "Transforms multiple svg files into one svg to be used with symbols.",
        "tags" : [ "API Calls" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "files",
          "description" : "Alle input files that will be needed for the compilation.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "file" : {
                  "type" : "string"
                },
                "relative" : {
                  "type" : "string"
                },
                "code" : {
                  "type" : "string"
                }
              }
            }
          }
        }, {
          "in" : "query",
          "name" : "options",
          "description" : "The options that should be used for compilation.",
          "required" : false,
          "schema" : {
            "type" : "object",
            "properties" : {
              "svg" : {
                "type" : "object",
                "nullable" : true,
                "properties" : {
                  "cleanDefs" : {
                    "type" : "boolean",
                    "nullable" : true
                  },
                  "cleanSymbols" : {
                    "type" : "boolean",
                    "nullable" : true
                  },
                  "svgAttrs" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "symbolAttrs" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "copyAttrs" : {
                    "type" : "string",
                    "nullable" : true
                  },
                  "renameDefs" : {
                    "type" : "boolean",
                    "nullable" : true
                  }
                }
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Compiled code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CompileResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Error while..."
          },
          "stack" : {
            "type" : "string",
            "example" : "Error in ../bla/.."
          }
        }
      },
      "CompileResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : ".css{color:red;}"
          },
          "log" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "Warning..."
            }
          }
        }
      }
    }
  }
}